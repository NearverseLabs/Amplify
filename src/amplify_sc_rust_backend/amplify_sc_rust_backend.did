type Principal = principal;

type Tokens = record {
    e8s: nat64;
};

type Participant = record {
    user_id: principal;
    is_verified: bool;
    reward_claimed: bool;
};

type UsersArgs = record {
    twitter_username: text;
    name: text;
};
type Users = record {
    twitter_username: text;
    name: text;
    id: principal;
};

type Winner = record {
    user_id: Principal;
    reward_claimed: bool;
};

type CreateCampaignArgs = record {
    reward: Tokens;
    reward_token: Principal;
    winners: nat64;
    project_name: text;
    tweet_id: text;
    starts_at: nat64;
    ends_at: nat64;
    user_id: principal;
};

type Campaign = record {
    reward: Tokens;
    reward_token: Principal;
    winners: nat64;
    project_name: text;
    tweet_id: text;
    campaign_id: nat64;
    starts_at: nat64;
    ends_at: nat64;
    user_id: principal;
    participants: vec Participant;
    selected_winners: vec Participant;
};

type Memo = nat64;

type CommonResult = variant {
    Ok: bool;
    Err: text;
};
type CampaignResult = variant {
    Ok: nat64;
    Err: text;
};

type PaginationArgs = record {
    page_number: nat64;
    page_size: nat64;
};

type Settings = record {
    min_reward_amount: nat64;
    min_winners: nat64;
    max_winners: nat64;
    platform_fees: nat64;
};


service : {
    "greet": (text) -> (text) query;
    whitelist_token: (token_canister_id: Principal) -> (CommonResult);
    unwhitelist_token: (token_canister_id: Principal) -> (CommonResult);
    is_token_whitelisted: (token_canister_id: Principal) -> (bool);
    get_whitelisted_tokens: () -> (vec Principal);

    update_min_reward_amount: (new_amount: nat64) -> (CommonResult);
    update_min_winners: (new_winners: nat64) -> (CommonResult);
    update_max_winners: (new_winners: nat64) -> (CommonResult);
    update_platform_fees: (platform_fees: nat64) -> (CommonResult);

    paginate_users: (PaginationArgs) -> (vec Users) query;
    register_user: (UsersArgs) -> (CommonResult);

    create_campaign: (CreateCampaignArgs) -> (CampaignResult);
    search_campaigns_by_project_name: (project_name_query: text) -> (vec Campaign);
    participate_in_campaign: (campaign_id: nat64) -> (CommonResult);
    select_winners: (campaign_id: nat64) -> (CommonResult);
    have_i_participated: (campaign_id: nat64) -> (CommonResult);
    am_i_a_winner: (campaign_id: nat64) -> (bool);
    paginate_campaigns: (args: PaginationArgs) -> (vec Campaign);
    paginate_winners: (campaign_id: nat64, args: PaginationArgs) -> (vec Participant);
    my_claimed_campaigns: () -> (vec Campaign);
    my_unclaimed_campaigns: () -> (vec Campaign);

    "submit_participants": (nat64, vec principal) -> (CommonResult);

    clear: () -> () oneway;
}
